// Code generated by go-bindata.
// sources:
// bin/dmij
// DO NOT EDIT!

package dmijson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _binDmij = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x58\x6d\x77\xda\xc8\x15\xfe\x5c\xfd\x8a\xbb\x32\x1b\xbf\x14\xa2\x24\x6d\x77\xbb\xb8\x78\x0f\x89\x49\xc2\xd6\x31\x3e\xe0\x6e\x7b\x0a\xe4\x1c\x21\x0d\xa0\xb5\x34\x62\xa5\x91\x1d\x37\xa6\xbf\xbd\xcf\x9d\x19\x09\x09\xc7\xe9\x2e\x5f\x60\x66\xee\xdb\xdc\x97\xe7\xde\xe1\xe0\x1b\x6f\x11\x49\x6f\xe1\xe7\x6b\xc7\x39\x70\x0e\x28\x48\xe5\xad\xc8\x14\xa9\xb5\xa0\xb4\x50\x9b\x42\x51\xba\xa4\x30\x89\x42\x11\xa4\xa1\xa0\x48\xaa\x94\x7e\x9a\x8c\x2e\x35\x75\xec\x2f\x44\x9c\x93\x9f\x09\xca\x55\x16\x6d\x36\x22\x64\x72\x3f\x8e\x49\xa6\x12\xdf\x9b\xb5\x2f\x8b\x44\x64\x51\x40\x4a\x7c\x52\x60\xb9\x13\x14\xa7\xe9\x0d\x2d\xd3\x8c\x2e\xfa\xaf\x07\x17\x5d\xfa\xb9\x7f\xf1\x8f\x01\x1d\xe5\x9b\x38\x52\x2a\x92\x2b\x02\x2b\xeb\x3f\xec\x1e\x1e\x83\x23\x5a\xf2\x0a\x2a\xa2\x1c\x52\x79\x97\xd7\x92\x22\xc5\x3b\xbe\x61\xd7\xe6\x2c\x44\xe0\x17\x39\x6c\x11\x81\x8a\x52\x99\x53\x26\x36\xc2\x57\x6d\x12\x7e\xb0\x86\xe9\xb9\xf2\x65\xa0\xe5\x04\xd8\x10\x21\x0b\x87\x95\xa4\x92\x0d\x85\x51\x06\xae\x34\xbb\x27\x5f\x86\x14\x16\x09\xdf\xc5\x37\x8e\x10\x52\x5f\x6b\x93\xa5\x81\xc8\x73\x58\x08\x6d\x4e\x21\x73\xa1\xe8\xba\xff\x8e\x46\x17\xe7\xfc\xf5\xbe\x7f\x79\x7e\x31\xe0\x95\xfd\x75\x35\x1e\xbc\x1d\xfe\xcb\x71\x7e\x2d\x52\x25\x8e\x8e\xe9\x33\x39\x84\xcf\x3f\xdf\xf7\xaf\x7b\x6e\xeb\xc4\xd5\xab\x83\xe9\x94\x5a\x9f\x79\xcf\xf3\xc8\xdb\xd2\x7c\x4e\xe6\xf3\xf0\x00\xf3\x55\x91\x49\x26\xa2\xfc\x26\xda\xb0\x27\x16\xb1\x2f\x6f\x34\x63\xc5\xf7\x3b\x78\xac\x6a\xa3\x6e\x3a\xed\xe6\x1b\x3f\x10\xdd\xf9\xdc\xdb\xba\xbb\xf3\xd6\x91\x08\xd6\x29\xb5\x78\x41\x0f\xa4\x32\xea\x84\x74\x38\x53\x87\xc7\x90\x99\x89\x24\xbd\x15\xa4\xfc\x45\x5e\x59\xa1\x09\x9f\x3d\x83\x39\xc3\x77\x97\xa3\xf1\x60\x6a\x14\xb4\xdb\xdb\xb9\xb6\x0d\x47\x46\xb1\xdb\x64\x81\xb5\x2d\x9d\x02\x4c\x84\x05\x72\x0f\xe1\x2f\x84\x63\x1c\x03\xb7\x23\x49\x10\x2f\xf6\x9f\x4d\x8b\x5b\x3f\x2e\x44\x8e\xa0\x20\x32\x41\x5a\xc4\xa1\x49\xa6\x38\xba\x11\x84\x44\x5b\x88\x6c\x67\x96\x11\xdd\xfb\x2f\xbd\x1e\x8e\x26\x63\x71\x1b\xe5\xc8\x89\x9a\x52\x9c\xfc\x0c\xfa\x47\x9b\xe7\x22\x0f\x90\xcb\xea\xd1\x41\x3f\x0c\x33\xc4\xbf\xb9\x39\x41\x72\xfb\x71\x7d\xaf\x47\xee\x18\x0e\x77\xed\xd5\xb5\x33\x3b\x92\xe0\x76\x93\x10\xdb\x99\xab\xef\x3f\x73\x5d\x3e\x37\x01\xab\xac\x3e\x61\xa1\x1f\xa7\x2f\x3a\x3f\xcc\xff\x78\xf4\x5c\x7f\x1f\xff\xd8\x7a\x52\x96\x96\xe4\xb2\xfa\xaf\xe9\x71\xb6\x8e\xb3\xf4\xa3\x58\x27\xa1\x26\x3c\x7b\xf6\x8a\x75\x9d\x92\xf8\x84\x3a\x7a\x89\x1f\x20\x11\x49\xa4\x98\xa4\x32\xe6\xed\xf0\x62\x70\xd9\xff\x30\xb0\x01\x62\x11\xe4\xa2\x06\x97\x51\x2c\xa4\x9f\x70\xa5\x29\x13\xd4\x52\x7b\x47\x10\xa7\x36\x9d\x9d\xed\xb8\x59\x7b\xbe\x4e\xef\x76\xda\x5d\xa2\xcf\x2e\x74\x06\x08\x63\x8b\x95\xeb\xdd\xd3\xea\x70\xeb\x1a\x83\x1c\x95\xfe\x92\xa7\x52\xdb\xe4\x5c\x7f\xb8\x3a\x1f\x8e\x91\x9e\xc9\x8d\x12\xa8\xd8\x4e\x78\xec\x38\xe3\xc1\x4f\x83\x37\x48\xad\x8f\x47\x43\xe9\xa3\xea\x6f\xc5\xc3\xb5\xbf\x88\xc5\xc3\x00\x35\x3b\x5a\x92\x59\x4c\x3e\x70\x0e\x3c\x1c\x3c\x18\x7f\xba\x8e\x03\x38\x8b\x19\xb6\x3a\x7d\x32\x49\xdb\x3b\x72\xfe\x30\x75\x0b\x79\x23\xd3\x3b\xe9\xce\x7b\x2a\x43\x22\xea\x9d\x7c\x23\x82\x68\x19\x89\xb0\xb6\x0b\x10\x5c\x08\x76\x43\x0c\x94\x58\xdc\x53\xfa\x5c\x3c\x4f\x9e\xd7\x08\x64\xaa\x18\x2f\x6e\x81\x9b\xe1\xde\xf6\x97\xe4\x19\x72\x91\x0b\xa9\x1a\xbb\x94\xa4\x61\x11\x0b\x83\x5d\xac\xac\x76\xfa\xe2\xe5\xab\x3f\xfd\xf9\x2f\xdf\x7d\xff\xd7\x1f\x6a\x9b\xd5\xde\x8b\xda\xe6\xdf\x52\x03\xe3\xac\xf9\xac\xdc\x87\xf3\xee\xd6\x88\x23\x0d\xdf\x4e\x7a\xc8\x42\x3f\xa4\x0e\x20\x79\x78\x39\x70\xc2\xd4\x54\x20\x2f\x2a\x38\xe0\xc5\x6f\x82\x03\x4d\xb8\x57\xd1\x8d\x33\x24\x78\xcb\xc4\x4d\x23\x17\xf2\xfa\x49\xba\x8f\xef\x81\xc6\xb0\xd1\xd2\x19\x60\x65\x04\x63\x82\xee\xf7\xdd\xef\xb6\xee\xd7\xf9\xa7\xfd\xce\xbf\xe7\x06\x20\x41\x07\x98\xee\x19\x5e\xaf\x09\x7f\x8f\x84\x18\x74\x9f\xfc\x7d\x78\x55\xa2\x91\xa9\x6e\xee\x38\xe8\x6e\xdc\xcc\x08\x49\x10\x8b\xa5\xf6\xac\xdb\xb5\x68\x6e\x9b\xd9\x1e\x59\x16\xad\xd6\x0d\x3a\x2d\xcc\x9a\xf2\xed\xb7\xdd\x93\xad\xde\xd5\xbc\x76\xf7\xe0\xe0\xa4\xbb\x2d\x75\x03\xc4\x77\x9d\xef\xfe\x10\x92\x91\x7d\xdc\x99\x72\x14\x61\x5b\x77\x2c\xdd\x22\x81\x97\xc2\x28\x45\xe7\x33\xe9\x94\xdb\xfe\x58\x7a\xc6\xd8\x07\x90\xda\x41\x2f\xee\x6e\xae\xab\x77\xf6\xf0\x93\x71\xdd\xf0\x18\xca\xd7\xa3\xeb\xf7\x3a\x81\x38\xbe\x86\x8d\xb7\x4a\x4b\x31\x05\x24\x84\xbc\x52\x42\x3b\x57\x9b\x56\xc8\x50\xe4\x51\xc6\x95\x08\xb7\xa0\x89\x0b\x81\xaa\x68\xfa\x81\xbf\x11\x93\xa3\xe3\x99\x3b\x7b\x3e\xf3\xaa\xd8\x74\x10\x1c\x23\xba\x74\x8e\xfe\x3e\x38\xa8\x85\xaf\xe9\x3c\xfd\xed\x79\x33\x77\x8f\xd1\xa6\xb1\xb9\x4b\x99\xc7\x2d\x4e\x64\xac\x72\x94\x31\xa0\xeb\x30\xf7\x66\xf9\x49\xcb\xf3\x56\x98\x3c\x34\x77\x72\x83\xc1\x80\x5a\x06\x7b\xbc\x16\xf7\xf9\x33\xf2\x42\x71\xeb\xc9\x02\x61\x78\x75\xf6\xec\x65\x79\x75\x3e\xab\xb9\x5d\xa5\x1b\xa4\xc7\xad\x88\x79\x34\x2a\x02\x80\xbc\x30\x7d\x0b\x95\x9c\xe1\x1c\xbf\x16\x62\x15\x49\xa9\x5b\x9b\x9e\x71\xd0\xc7\xa4\x49\x3f\x04\x9c\x43\xc0\x22\xbf\x41\xa8\xec\x84\xc1\x4d\xc6\xce\x16\x76\xd7\xae\xe6\xf3\x53\x3d\x13\x39\x76\x0e\x80\x35\x41\x2c\x7c\x49\xc5\x06\xb0\x12\x61\xd4\x52\xfe\xaa\x3a\x64\xc9\xa6\x45\x94\x6d\x05\xb8\x4f\xee\x4c\x56\x9d\x63\x3e\x93\x2e\x64\xe0\x2e\xcb\xe8\x13\x25\x90\x94\xc3\xb6\x5c\x31\x1c\xd9\xf6\xfc\x5b\x9d\x53\xd2\x96\xcd\xa0\x57\x27\xf7\xec\x75\x76\x22\xcb\x44\x9c\x5c\xef\x6d\xd9\x61\xaa\xdc\x34\x1e\xe9\xb1\x90\xfa\x9e\x05\x88\x52\x2c\xef\x2e\xa3\x5a\x15\xfd\x52\xe0\x12\x76\x64\x24\x11\x8b\x04\xa1\x32\xd3\x24\xe6\x52\xee\x07\xee\x64\x74\x31\x2a\x6b\x19\x79\x8c\xb9\xb1\x16\x53\xdf\x78\xc1\x32\xee\xd5\x14\x1c\xd9\xf9\x4f\xb3\xac\x58\xd8\x5e\xb1\xf0\x56\xc5\xc8\x0b\x5d\x61\x7c\xe1\x92\x07\x98\x63\x78\xb0\x30\xb9\xeb\x92\xbb\x2b\x52\xcd\x83\xe1\x28\xcb\x7c\xd8\xce\x19\xc3\xb6\x07\x08\x76\x8c\xee\x47\x77\x91\x5a\x03\xee\xcb\x3b\x87\x51\xc8\xc7\x42\x62\x5a\x92\x4a\x64\x28\xc8\x72\x9c\xe5\xab\xfc\xf8\x64\xb5\xf3\xaf\xff\x93\x24\x6d\xce\x92\xca\x2e\x4b\x5c\x2a\x36\x36\x1d\xf2\x98\x96\x24\x3e\x0a\x6c\xe3\x67\xbe\x12\xc6\x81\x80\x87\x24\x07\x9f\xc2\x3c\x01\x42\xee\xb9\x06\xc0\x0e\xe1\x63\xf4\x42\xfc\x84\x95\x2a\xbb\xb7\xc2\xec\x83\x40\x32\xb2\xf1\x8d\xdb\x36\x34\xe0\xbd\x4b\x59\x89\x96\x60\xe4\x55\x75\x80\x01\x38\x65\x8a\xdc\x87\x5b\x30\x1b\x14\x18\xd3\xb4\xbb\x70\x7f\xd4\x5c\xbe\xa3\xa7\x93\xaa\x12\x4f\xca\x52\xac\x74\x59\x59\x1a\x63\xfd\xe0\x06\xb6\x08\xb6\xa7\xf9\x34\xd0\x58\x6c\x5e\x1d\x8c\xf7\x65\xf1\x39\x8f\x23\x7d\x35\x1e\x8e\xc6\x76\x62\xaf\xbc\xda\x36\xf5\x86\x57\x96\xf1\xcf\xd3\x09\xd2\x64\x63\x26\x3d\x4e\xe0\x6a\x81\x8f\x97\x4f\xc9\xc8\x89\xb8\x8b\x63\x2d\xbb\x6a\xfa\x76\x4a\x90\x71\xbb\x37\x84\xfd\x34\x68\x2b\x52\x86\xfa\xaf\xd8\xc3\xa4\xd6\x5f\x80\x1d\x69\x02\x4d\x3c\x29\xee\xe5\x59\xdd\x98\x32\xcd\xf4\x07\x33\xab\xa6\x98\xb9\x5d\xfa\x92\x2c\xfd\x00\x68\x13\x10\x4d\xf7\x44\x4e\x05\x8d\xa7\x28\x4d\x29\xee\x9a\xde\xc3\x38\xda\x68\x5d\x56\xdd\x91\x7e\x8f\xe1\x87\x3e\x73\x8f\xcd\xf4\xcc\x67\xe4\x4e\xeb\x97\xad\x4a\x62\xe7\x4d\x23\xc8\x18\x8c\xb2\xac\x3e\x6e\x95\xf7\x1c\xfd\x34\xd9\x30\x96\x18\xe4\x85\x79\x68\x86\xb6\xdb\x4d\xf0\xbc\xd2\xed\x92\x97\x3a\x15\x7a\x3a\xc6\x18\xb9\x90\x69\x0e\xd0\x6c\x82\x4e\x85\x27\xb5\x45\x49\xb4\xa6\xbb\x80\x3a\x31\xba\x91\x99\x8d\x3f\xbb\x4e\x10\x96\xa7\x0e\x3f\xa2\x19\x75\xf1\x8a\x3d\x29\xa7\xb6\x18\xb5\xe8\xb2\xa0\x4e\xa7\x36\x9a\xbb\xda\xb5\xd8\x9e\x95\x23\xc8\x9b\xcb\xeb\x86\x2a\x83\xdf\x95\xbe\xd2\x09\x20\x43\x67\xfc\x15\x4f\x04\x73\x77\x1e\xe4\x1b\x2c\xde\xc9\xee\x65\x22\x18\x20\xda\x8f\x47\xb2\xd2\x84\xa9\x51\xcd\x66\x73\x3f\x60\xbb\x9b\xa2\xf4\xb1\xbd\x08\x7f\x8c\x36\xa6\xad\xb6\xf4\xfd\x60\x55\x79\xbd\x86\xa1\x2b\x45\x2f\xea\x6f\x25\x94\x88\x15\x29\x77\x96\x34\x4c\x9a\xef\xe2\xcd\x4e\xfb\xb2\x08\xcd\x6e\x56\x78\x29\x3b\x59\x82\x51\x79\x59\x45\x81\xdf\x37\xba\x59\xc4\xdc\xe1\xf5\xbf\x14\x59\x82\xf1\xef\x5e\xa3\x32\x26\x35\x66\xd7\xc0\x8c\x5e\x62\xfe\x67\x00\x4e\x80\x65\x95\x76\x57\x42\x0a\x8d\x8b\x61\x2a\x72\x46\xb2\xbc\xd8\x6c\x52\xfd\x07\x0c\x8f\x0a\x1a\xc0\x16\x3e\x5e\xb7\xfc\x6f\x87\x2c\xff\x75\xa8\x5e\x56\x76\x84\x5f\x09\x4c\x1b\xe8\x4f\x6e\xb8\xec\xba\x84\x9f\xa7\xc6\x89\x1a\x13\x5a\x58\x33\xaf\x71\x55\x78\x4c\xe7\x83\x37\xa3\xf3\x81\xe9\x31\xa7\xa7\x76\x7f\x79\x5c\x6b\xd1\xa3\xab\xeb\xfe\xf8\x5d\x79\x28\x72\x3f\xb0\x09\xca\x6e\x32\xec\x1a\x05\xea\xef\x43\xac\x77\x7f\x13\x61\xbe\xd2\x2f\x37\xaa\x3d\x03\xb5\x47\xf1\xda\xac\x0b\x79\x92\xaf\x4e\xbb\xa7\xe5\x2b\x92\xcd\x11\xde\x8d\xff\x0b\x00\x00\xff\xff\x99\x73\x9b\x32\xd8\x12\x00\x00")

func binDmijBytes() ([]byte, error) {
	return bindataRead(
		_binDmij,
		"bin/dmij",
	)
}

func binDmij() (*asset, error) {
	bytes, err := binDmijBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/dmij", size: 4824, mode: os.FileMode(509), modTime: time.Unix(1439523221, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bin/dmij": binDmij,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bin": &bintree{nil, map[string]*bintree{
		"dmij": &bintree{binDmij, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

