// Code generated by go-bindata.
// sources:
// bin/dmij
// DO NOT EDIT!

package dmijson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _binDmij = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x58\x6d\x77\xda\xc8\x15\xfe\x5c\xfd\x8a\xbb\x32\x1b\xdb\x14\xac\x24\x6d\x77\xbb\xb8\x78\x0f\x89\x49\xc2\xd6\x31\x3e\xc6\xdd\xf6\x14\xc8\x39\x42\x1a\x40\x6b\x69\xc4\x4a\x23\x3b\x6e\x4c\x7f\x7b\x9f\x3b\x33\x12\x12\x89\xd3\x5d\xbe\xc0\xcc\xdc\xb7\xb9\x2f\xcf\xbd\xc3\xc1\x37\xde\x22\x92\xde\xc2\xcf\xd7\x8e\x73\xe0\x1c\x50\x90\xca\x3b\x91\x29\x52\x6b\x41\x69\xa1\x36\x85\xa2\x74\x49\x61\x12\x85\x22\x48\x43\x41\x91\x54\x29\xfd\x34\x19\x5f\x6a\xea\xd8\x5f\x88\x38\x27\x3f\x13\x94\xab\x2c\xda\x6c\x44\xc8\xe4\x7e\x1c\x93\x4c\x25\xbe\x37\x6b\x5f\x16\x89\xc8\xa2\x80\x94\xf8\xa8\xc0\x72\x2f\x28\x4e\xd3\x5b\x5a\xa6\x19\x5d\x0c\x5e\x0d\x2f\x7a\xf4\xf3\xe0\xe2\x1f\x43\x3a\xca\x37\x71\xa4\x54\x24\x57\x04\x56\xd6\x7f\xd8\x3b\x3c\x06\x47\xb4\xe4\x15\x54\x44\x39\xa4\xf2\x2e\xaf\x25\x45\x8a\x77\x7c\xc3\xae\xcd\x59\x88\xc0\x2f\x72\xd8\x22\x02\x15\xa5\x32\xa7\x4c\x6c\x84\xaf\x3a\x24\xfc\x60\x0d\xd3\x73\xe5\xcb\x40\xcb\x09\xb0\x21\x42\x16\x0e\x2b\x49\x25\x1b\x0a\xa3\x0c\x5c\x69\xf6\x40\xbe\x0c\x29\x2c\x12\xbe\x8b\x6f\x1c\x21\xa4\xbe\xd6\x26\x4b\x03\x91\xe7\xb0\x10\xda\x9c\x42\xe6\x42\xd1\xcd\xe0\x2d\x8d\x2f\xce\xf9\xeb\xdd\xe0\xf2\xfc\x62\xc8\x2b\xfb\xeb\xea\x7a\xf8\x66\xf4\x2f\xc7\xf9\xb5\x48\x95\x38\x3a\xa6\x4f\xe4\x10\x3e\xff\x7c\x37\xb8\xe9\xbb\xad\xb6\xab\x57\x07\xd3\x29\xb5\x3e\xf1\x9e\xe7\x91\xb7\xa5\xf9\x9c\xcc\xe7\xf1\x11\xe6\xab\x22\x93\x4c\x44\xf9\x6d\xb4\x61\x4f\x2c\x62\x5f\xde\x6a\xc6\x8a\xef\x77\xf0\x58\xd5\x46\xdd\x74\xda\xcb\x37\x7e\x20\x7a\xf3\xb9\xb7\x75\x77\xe7\xad\x23\x11\xac\x53\x6a\xf1\x82\x1e\x49\x65\xd4\x0d\xe9\x70\xa6\x0e\x8f\x21\x33\x13\x49\x7a\x27\x48\xf9\x8b\xbc\xb2\x42\x13\x3e\x7b\x06\x73\x46\x6f\x2f\xc7\xd7\xc3\xa9\x51\xd0\xe9\x6c\xe7\xda\x36\x1c\x19\xc5\x6e\x93\x05\xd6\xb6\x74\x0a\x30\x11\x16\xc8\x3d\x84\xbf\x10\x8e\x71\x0c\xdc\x8e\x24\x41\xbc\xd8\x7f\x36\x2d\xee\xfc\xb8\x10\x39\x82\x82\xc8\x04\x69\x11\x87\x26\x99\xe2\xe8\x56\x10\x12\x6d\x21\xb2\x9d\x59\x46\x74\xff\xbf\xf4\x33\x76\x91\x0e\x35\x7d\xd8\x3c\x17\x79\x80\x8c\x55\x9f\x1d\x0c\xc2\x30\x43\x94\x9b\x9b\x13\xa4\xb0\x1f\xd7\xf7\xfa\xe4\x5e\xc3\xad\xae\xbd\xa0\x76\x59\x57\x12\x9c\x6b\xc2\xbe\x9d\xb9\xfa\x96\x33\xd7\xe5\x73\x13\x96\xca\xb6\x36\x0b\xfd\x30\x7d\xde\xfd\x61\xfe\xc7\xa3\x13\xfd\x7d\xfc\x63\xeb\x49\x59\x5a\x92\xcb\xea\xbf\xa6\xc7\xd9\x3a\xce\xd2\x8f\x62\x9d\x6a\x9a\xf0\xec\xd9\x4b\xd6\x75\x4a\xe2\x23\xaa\xe5\x05\x7e\x80\x44\x24\x91\x62\x92\xca\x98\x37\xa3\x8b\xe1\xe5\xe0\xfd\xd0\x86\x81\x45\x90\x8b\x4a\x5b\x46\xb1\x90\x7e\xc2\xf5\xa4\x4c\xe8\x4a\xed\x5d\x41\x9c\xc0\x74\x76\xb6\xe3\x66\xed\xf9\x3a\xbd\xdf\x69\x77\x89\x3e\xb9\xd0\x19\x20\x58\x2d\x56\xae\x77\x4f\xab\xc3\xad\x6b\x0c\x72\x54\xfa\x4b\x9e\x4a\x6d\x93\x73\xf3\xfe\xea\x7c\x74\x8d\x24\x4c\x6e\x95\x40\x5d\x76\xc3\x63\xc7\xb9\x1e\xfe\x34\x7c\x8d\x04\xfa\x70\x34\x92\x3e\x6a\xfb\x4e\x3c\xde\xf8\x8b\x58\x3c\x0e\x51\x99\xe3\x25\x99\xc5\xe4\xfd\xab\xd1\x78\xf2\x78\xf0\x68\xfc\xe9\x3a\x0e\x40\x2b\x66\x70\xea\x0e\xc8\xa4\x66\xff\xc8\xf9\xc3\xd4\x2d\xe4\xad\x4c\xef\xa5\x3b\xef\xab\x0c\xe9\xa6\x77\xf2\x8d\x08\xa2\x65\x24\xc2\xda\x2e\xa0\x6e\x21\xd8\x0d\x31\xb0\x60\xf1\x40\xe9\x89\x38\x49\x4e\x6a\x04\x32\x55\x8c\x0a\x77\x40\xc7\x70\x6f\xfb\x4b\xf2\x0c\xb9\xc8\x85\x54\x8d\x5d\x4a\xd2\xb0\x88\x85\x41\x28\x56\x56\x3b\x7d\xfe\xe2\xe5\x9f\xfe\xfc\x97\xef\xbe\xff\xeb\x0f\xb5\xcd\x6a\xef\x79\x6d\xf3\x6f\xa9\x01\x6b\xd6\x7c\x56\xee\xc3\x79\xf7\x6b\xc4\x91\x46\x6f\x26\x7d\x64\xa1\x1f\x52\x17\xc0\x3b\xba\x1c\x3a\x61\x6a\xea\x8c\x17\x55\xd1\xf3\xe2\x37\x15\xbd\x26\xdc\xab\xdb\xc6\x19\x12\xbc\x65\xe2\xa6\xf1\x09\x79\xfd\x24\xdd\x87\x77\xc0\x5c\xd8\x68\xe9\x0c\x7c\x32\x4e\x31\x41\xef\xfb\xde\x77\x5b\xf7\xeb\xfc\xd3\x41\xf7\xdf\x73\x03\x83\xa0\x03\x18\xf7\x0d\xaf\xd7\x04\xb9\xcf\x84\x18\x0c\x9f\xfc\x7d\x74\x55\x62\x8e\xa9\x6e\xee\x2b\xe8\x61\xdc\xb2\x08\x49\x10\x8b\xa5\xf6\xac\xdb\xb3\x98\x6d\x5b\xd6\x1e\x59\x16\xad\xd6\x0d\x3a\x2d\xcc\x9a\xf2\xed\xb7\xbd\xf6\x56\xef\x6a\x5e\xbb\x7b\x70\xd0\xee\x6d\x4b\xdd\x80\xea\x5d\x7f\x7b\x38\x84\x64\x64\x1f\xf7\x9f\x1c\x45\xd8\xd1\x7d\x49\x37\x42\xa0\xa2\x30\x4a\xd1\xdf\x4c\x3a\xe5\xb6\x0b\x96\x9e\x31\xf6\x01\xa4\x76\x00\x8b\xbb\x9b\xeb\xea\x9d\x3d\x94\x64\xf4\x36\x3c\x86\xf2\xd5\xf8\xe6\x9d\x4e\x20\x8e\xaf\x61\xe3\xad\xd2\x52\xf4\xfa\x84\x90\x57\x4a\x68\xe7\x6a\xd3\x0a\x19\x8a\x3c\xca\xb8\x12\xe1\x16\xb4\x6a\x21\x50\x15\x4d\x3f\xf0\x37\x62\x72\x74\x3c\x73\x67\x27\x33\xaf\x8a\x4d\x17\xc1\x31\xa2\x4b\xe7\xe8\xef\x83\x83\x5a\xf8\x9a\xce\xd3\xdf\x9e\x37\x73\xf7\x18\x6d\x1a\x9b\xbb\x94\x79\xdc\xe2\x44\xc6\x2a\x47\x19\x03\xba\x0e\x73\x6f\x96\xb7\x5b\x9e\xb7\xc2\x7c\xa1\xb9\x93\x5b\xb4\x7f\x6a\x19\xec\xf1\x5a\xdc\xcd\xcf\xc8\x0b\xc5\x9d\x27\x0b\x84\xe1\xe5\xd9\xb3\x17\xe5\xd5\xf9\xac\xe6\x76\x95\x6e\x90\x1e\x77\x22\xe6\x01\xa8\x08\x00\xf2\xc2\x74\x27\x54\x72\x86\x73\xfc\x5a\x88\x55\x24\xa5\x6e\x60\x7a\x92\x41\xb7\x92\x26\xfd\x10\x70\x0e\x01\x8b\xfc\x06\xa1\xb2\x73\x04\x37\x19\x3b\x41\xd8\x5d\xbb\x9a\xcf\x4f\xf5\xe4\xe3\xd8\x6e\x0f\x6b\x82\x58\xf8\x92\x8a\x0d\x60\x25\xc2\x40\xa5\xfc\x55\x75\xc8\x92\x4d\x8b\x28\xdb\x0a\x70\x9f\xdc\x99\xac\x3a\xc7\x7c\x26\x5d\xc8\xc0\x5d\x96\xd1\x47\x4a\x20\x29\x87\x6d\xb9\x62\x38\xb2\x4d\xf8\xb7\x3a\xa7\xa4\x2d\x9b\x41\xbf\x4e\xee\xd9\xeb\xec\x44\x96\x89\x38\xb9\xd9\xdb\xb2\x23\x53\xb9\x69\x3c\xd2\x67\x21\xf5\x3d\x0b\x10\xa5\x58\xde\x5d\x46\xb5\x2a\xfa\xa5\xc0\x25\xec\x60\x48\x22\x16\x09\x42\x65\x66\x46\x4c\x9f\xdc\x0f\xdc\xc9\xf8\x62\x5c\xd6\x32\xf2\x18\xd3\x61\x2d\xa6\xbe\xf1\x82\x65\xdc\xab\x29\x38\xb2\xfb\x9f\x66\x59\xb1\xb0\xbd\x62\xe1\xad\x8a\x91\x17\xba\xc2\xf8\xc2\x25\x0f\x30\xc7\xf0\x60\x61\x72\xd7\x25\x77\x57\xa4\x9a\x07\x23\x50\x96\xf9\xb0\x9d\x33\x86\x6d\x0f\x10\xec\x18\xdd\x8f\xee\x23\xb5\x06\xdc\x97\x77\x0e\xa3\x90\x8f\x85\xc4\x4c\x24\x95\xc8\x50\x90\xe5\xd0\xca\x57\xf9\xf1\xc9\x6a\xe7\x5f\xff\x27\x49\x3a\x9c\x25\x95\x5d\x96\xb8\x54\x6c\x6c\x3a\xe4\x61\x2c\x49\x7c\x14\xd8\xc6\xcf\x7c\x25\x8c\x03\x01\x0f\x49\x0e\x3e\x85\x79\x02\x84\xdc\x73\x0d\x80\x1d\xc2\xc7\xe8\x85\xf8\x09\x2b\x55\xf6\x60\x85\xd9\xb1\x5f\x32\xb2\xf1\x8d\x3b\x36\x34\xe0\xbd\x4f\x59\x89\x96\x60\xe4\x55\x75\x80\x31\x37\x65\x8a\xdc\x87\x5b\x30\x1b\x14\x18\xd3\xb4\xbb\x70\x7f\xd4\x5c\xbe\xa3\xa7\x76\x55\x89\xed\xb2\x14\x2b\x5d\x56\x96\xc6\x58\x3f\xb8\x85\x2d\x82\xed\x69\x3e\x00\x34\x16\x9b\xb7\x05\xe3\x7d\x59\x7c\xce\xe7\x91\xbe\xba\x1e\x8d\xaf\xed\x5c\x5e\x79\xb5\x63\xea\x0d\x6f\x29\xe3\x9f\xa7\x13\xa4\xc9\xc6\x4c\x7a\x9c\xc0\xd5\x02\x1f\xef\x9b\x92\x91\x13\x71\x17\xc7\x5a\x76\xd5\xf4\xed\x94\x20\xe3\x76\x2f\x05\xfb\x69\xd0\x56\xa4\x0c\xf5\x5f\xb1\x87\x49\xad\xbf\x00\x3b\xd2\x04\x9a\x78\x52\xdc\xcb\xb3\xba\x31\x65\x9a\xe9\x0f\x66\x56\x4d\x31\x73\x7b\xf4\x25\x59\x7a\xcc\xef\x10\x10\x4d\xf7\x44\x4e\x05\x8d\xa7\x28\x4d\x29\xee\x9b\xde\xc3\x38\xda\x68\x5d\x56\xdd\x91\x7e\x75\xe1\x87\x3e\x73\x8f\xcd\xf4\xcc\x67\xe4\x4e\xeb\x97\xad\x4a\x62\xe7\x4d\x23\xc8\x18\x8c\xb2\xac\x3e\x6e\x95\xf7\x1c\xfd\x34\xd9\x30\x96\x18\xe4\x85\x79\x68\x86\xb6\xdb\x4d\xf0\x88\xd2\xed\x92\x97\x3a\x15\xfa\x3a\xc6\x18\xb9\x90\x69\x0e\xd0\x6c\x82\x4e\x85\x87\xb3\x45\x49\xb4\xa6\xfb\x80\xba\x31\xba\x91\x99\x8d\x3f\xb9\x4e\x10\x96\xa7\x0e\x3f\x95\x19\x75\xf1\x56\x6d\x97\x53\x5b\x8c\x5a\x74\x59\x50\xb7\x5b\x1b\xcd\x5d\xed\x5a\x6c\xcf\xca\x11\xe4\xf5\xe5\x4d\x43\x95\xc1\xef\x4a\x5f\xe9\x04\x90\xa1\x33\xfe\x8a\x27\x82\xb9\x3b\x0f\xf2\x0d\x16\xaf\xbd\x7b\x99\x08\x06\x88\xce\xe7\x23\x59\x69\xc2\xd4\xa8\x66\xb3\xb9\x1f\xb0\xdd\x4d\x51\xfa\xd8\x5e\x84\x3f\x46\x1b\xd3\x56\x5b\xfa\x7e\xb0\xaa\xbc\x5e\xc3\xd0\x95\xa2\xe7\xf5\xb7\x12\x4a\xc4\x8a\x94\x3b\x4b\x1a\x26\xcd\x77\xf1\x66\xa7\x7d\x59\x84\x66\x37\x2b\xbc\x87\x9d\x2c\xc1\xa8\xbc\xac\xa2\xc0\xef\x1b\xdd\x2c\x62\xee\xf0\xfa\xbf\x88\x2c\xc1\xf8\xf7\xa0\x51\x19\x93\x1a\xb3\x6b\x60\x46\x2f\x31\xff\x26\x00\x27\xc0\xb2\x4a\x7b\x2b\x21\x85\xc6\xc5\x30\x15\x39\x23\x59\x5e\x6c\x36\xa9\xfe\x9b\x85\x47\x05\x0d\x60\x0b\x1f\x6f\x58\xfe\x4f\x43\x96\xff\x2d\x54\x2f\x2b\x3b\xc2\xaf\x04\xa6\x0d\xf4\x27\x37\x5c\xf6\x5c\xc2\xcf\x53\xe3\x44\x8d\x09\x2d\xac\x99\xd7\xb8\x2a\x3c\xa6\xf3\xe1\xeb\xf1\xf9\xd0\xf4\x98\xd3\x53\xbb\xbf\x3c\xae\xb5\xe8\xf1\xd5\xcd\xe0\xfa\x6d\x79\x28\x72\x3f\xb0\x09\xca\x6e\x32\xec\x1a\x05\xea\xef\x43\xac\x77\x7f\x06\x61\xbe\xd2\x2f\x37\xaa\x3d\x03\xb5\x47\xf1\xda\xac\x0b\x79\x92\xaf\x4e\xbb\xa7\xe5\x2b\x92\xcd\x11\xde\x8d\xff\x0b\x00\x00\xff\xff\xe9\x7d\xc7\x31\xbe\x12\x00\x00")

func binDmijBytes() ([]byte, error) {
	return bindataRead(
		_binDmij,
		"bin/dmij",
	)
}

func binDmij() (*asset, error) {
	bytes, err := binDmijBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/dmij", size: 4798, mode: os.FileMode(509), modTime: time.Unix(1439492209, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bin/dmij": binDmij,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bin": &bintree{nil, map[string]*bintree{
		"dmij": &bintree{binDmij, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

