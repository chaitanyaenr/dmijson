// Code generated by go-bindata.
// sources:
// bin/dmij
// DO NOT EDIT!

package dmijson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _binDmij = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x8c\x57\x6d\x73\xdb\xc6\x11\xfe\x8e\x5f\xb1\x39\x32\x96\xc4\x8a\x41\x9c\x0f\xed\x94\x1a\x2a\x23\x5b\x74\xcc\x54\x16\x35\x22\x9b\xe9\x54\xa4\x67\x4e\xc0\x51\x42\x04\x1c\x18\xe0\x20\xd9\x95\xd4\xdf\xde\x67\xef\x0e\x20\x40\x5b\x6e\xf8\x85\xc0\xdd\xbe\xbf\x3c\xbb\xe8\x7d\x17\x5e\x27\x3a\xbc\x96\xe5\x6d\x10\xf4\x82\x1e\x45\xb9\xbe\x57\x85\x21\x73\xab\x28\xaf\xcc\xa6\x32\x94\xaf\x29\xce\x92\x58\x45\x79\xac\x28\xd1\x26\xa7\x5f\xe7\xb3\x73\x4b\x9d\xca\x6b\x95\x96\x24\x0b\x45\xa5\x29\x92\xcd\x46\xc5\x4c\x2e\xd3\x94\x74\xae\xf1\xbf\xb9\x95\xba\xca\x54\x91\x44\x64\xd4\x27\x03\x96\x07\x45\x69\x9e\xdf\xd1\x3a\x2f\xe8\xec\xe4\xcd\xe4\x6c\x44\xbf\x9d\x9c\xfd\x73\x42\xfb\xe5\x26\x4d\x8c\x49\xf4\x0d\x81\x95\xf5\xef\x8d\xf6\x0e\xc0\x91\xac\xf9\x0d\x2a\x92\x12\x52\xf9\x94\xdf\x35\x25\x86\x4f\xa4\x63\xb7\xe6\x5c\xab\x48\x56\x25\x6c\x51\x91\x49\x72\x5d\x52\xa1\x36\x4a\x9a\x43\x52\x32\xba\x85\xe9\xa5\x91\x3a\xb2\x72\x22\x1c\xa8\x98\x85\xc3\x4a\x32\xd9\x86\xe2\xa4\x00\x57\x5e\x7c\x26\xa9\x63\x8a\xab\x8c\x7d\x91\x2e\x10\x4a\x5b\xb7\x36\x45\x1e\xa9\xb2\x84\x85\xd0\x16\x54\xba\x54\x86\x16\x27\xbf\xd0\xec\xec\x94\xff\xde\x9f\x9c\x9f\x9e\x4d\xf8\xcd\x3f\x5d\x5c\x4e\xde\x4d\xff\x15\x04\x7f\x54\xb9\x51\xfb\x07\xf4\x48\x01\xe1\x77\x75\x45\xfd\xc7\xd7\x61\x48\xe1\x33\xd1\x6a\x45\x4f\x4f\xb0\xd3\x54\x85\xa6\x1e\x95\x77\xc9\x86\x1d\xbe\x4e\xa5\xbe\x6b\xa8\x6d\x9c\x68\xfc\x5f\xfa\x4d\x15\x25\x1c\x63\x96\xed\xe1\xa9\x2a\x23\xc4\xde\x7c\x71\x71\x12\xc7\x05\xec\xed\x1e\xce\x91\x0c\x99\xb6\xcf\xc6\x24\x2e\xa1\x4d\xb0\x2d\xaf\x5e\x91\x8a\x6e\x73\x1a\x6a\x12\xfd\x47\xe7\xc0\xf3\x52\xf4\x07\x4b\x21\xf8\xd2\x19\xda\x18\x36\x60\x89\x1f\xaf\x7e\x1c\xfe\x7d\xf5\x97\xfd\x1f\xec\xff\xc1\xcf\xfd\x17\x05\xf5\x07\x82\x15\xbf\xa8\x21\x78\x0e\x82\xb5\x4c\x52\x1b\x2b\x4b\x75\xfc\xea\x27\xd6\x72\x44\xea\x13\xd2\xfd\x1a\x0f\x20\x51\x59\x62\x98\xa4\x31\xe3\xdd\xf4\x6c\x72\x7e\xf2\x61\xe2\xa3\xc9\x22\x48\xa0\x54\xd6\x49\xaa\xb4\xcc\xb8\x20\x8c\xb0\xd4\xb5\xea\xa1\x82\x76\x58\x73\x7c\xbc\xe5\x66\xed\x81\xc9\x7f\x2f\x73\x6d\xa5\x07\x8b\x0f\x17\xa7\xd3\xcb\x71\x7f\x3f\xbb\x33\x0a\x25\x32\x8c\x51\x8e\x8d\x59\xc2\x5d\x8f\xa8\xef\x1e\x44\x10\x5c\x4e\x7e\x9d\xbc\x5d\x8c\xc5\xc7\xfd\xa9\x96\x28\xc1\x7b\xf5\xb4\x90\xd7\xa9\x7a\x9a\xa0\x80\x66\x6b\x72\x2f\xf3\x0f\x6f\xa6\xb3\xf9\x53\xef\xc9\xc5\x0b\x7c\x0f\xb7\x30\x94\xa6\xef\xe6\x63\x04\x58\xc6\x34\x44\x6b\x4c\xcf\x27\x41\x9c\x6f\x4b\x00\xef\xde\x3d\xb4\x28\xba\xa4\x52\xdd\x3b\x24\xa2\xef\xf4\x33\x19\xc7\xff\x45\xba\x8f\xef\x51\xe2\x50\xe8\xe9\x5c\xb5\x8e\x91\x0d\x26\x18\xfd\x6d\xf4\xd7\x67\xf1\x6d\xfe\xab\x93\xe1\xbf\x57\x96\x9d\xe9\x50\xfb\x63\xc7\x1b\x86\x57\x57\xa3\x72\x23\x23\x35\x5a\xad\x50\xdd\xbb\x42\x5c\xcb\xcc\xff\x31\xbd\x08\xec\x7b\xcf\x21\x80\x6d\x63\x40\x06\x23\x04\x01\x5e\x52\xb5\xb6\xa8\x23\x46\xc2\x93\x39\x84\xd8\x21\x2b\x92\x9b\xdb\x0e\x9d\x15\xe6\x4d\xf9\xfe\xfb\xd1\xe0\xd9\x9e\x5a\x5e\x7f\xda\xeb\x0d\x46\xcf\xb5\x6e\xb4\xd9\x16\x4e\x3e\xef\x41\xf2\xb5\xb2\xed\x5e\xa2\x64\x0e\x2d\x0c\x58\xdc\x01\x52\x29\xa7\x14\x70\x82\x86\x52\xda\x94\x1e\x74\xea\xc8\x38\xfb\xd0\x49\xbe\xa7\x5c\x03\x38\x77\xed\xc9\x4e\x2b\xe3\xd2\xf3\x38\xca\x37\xb3\xc5\xfb\xb1\x29\x2a\xc5\xf9\x75\x6c\x7c\x54\x5b\x0a\x68\xcd\x08\x45\x62\x94\x0d\xae\x35\xad\xd2\xb1\x2a\x93\x82\x2b\x0a\x61\x01\x32\x2a\x15\x03\xd1\x3a\x71\xe0\x7f\xe4\x64\xff\x60\x29\x96\x3f\x2c\xc3\x26\x37\x43\x24\xa7\x13\x1b\xfb\xdf\xeb\xb5\xb2\xf7\x95\xfb\x30\x5c\x8a\x2e\xdf\xbe\x6d\x06\xef\xc9\x13\xcc\x44\x8b\x50\x7f\x6f\x69\xf6\xf0\x56\x02\x3f\xd1\x66\x7b\x65\xb8\x2c\x07\xfd\x30\xbc\x01\x98\x5b\xe6\xec\x0e\x58\x5b\x77\x4d\xd8\x67\xe8\x3c\xa6\x30\x56\xf7\xa1\xae\x90\x84\x9f\x8e\x5f\xbd\xae\x1d\xe7\xbb\x56\xd0\x4d\xbe\x41\x71\xdc\xab\x94\xa7\x4d\x15\x01\x8a\x38\x61\x00\x69\x00\x7b\x81\x7b\x3c\x5d\xab\x9b\x44\x6b\x3b\x44\xec\xd8\xa0\x34\xd1\x4d\x05\x0f\xff\x43\x56\x5d\x0b\x9f\xc4\xf9\xcc\x6a\xb1\xa5\xef\x4a\xdc\x16\x3f\xe3\x8d\x65\x43\x95\x70\xde\x98\xe6\x3b\xe4\xd7\x63\x3d\xc3\xa7\x47\x79\x7f\xea\xdf\x56\xab\x23\x3b\x9d\x2c\xaf\x73\x22\x4a\x95\xd4\x54\x6d\x30\x3f\x12\x0c\x3d\x23\x6f\x9a\x4b\x96\xec\x20\xb0\xb6\x09\xd0\x46\x62\xa9\x1b\x64\x5c\x2d\xb5\x80\x0c\x84\x60\x9d\x7c\xa2\x0c\x92\x4a\xb8\x54\x1a\xca\x30\x8d\x3b\x72\xbc\x65\x5d\x39\x44\xe8\xe5\x5e\x8d\xb9\x02\x04\xa3\xbe\x1f\x59\x23\xcf\x21\x82\x46\xcc\x9f\xc9\x4c\x4d\x5b\xa3\xe6\xb8\x4d\x1e\xfa\xa0\x34\x54\xce\x0e\x7a\x64\x2f\xb6\x7a\xea\xc6\x98\x2f\x76\x8e\xfc\xc4\xac\x0f\x9d\x81\x63\x96\xdc\x3e\xf3\x80\xd5\xd6\xb5\x4e\x5a\x5d\xfd\x7b\x85\xf8\xf8\xbd\x80\x54\xaa\x32\x14\x8f\x5b\x19\xb0\x7c\xf0\xae\x22\xe6\xb3\xb3\x59\x8d\x2d\xe8\x2b\x2c\x07\xad\x2a\x93\x2e\xc0\x9e\x71\xa7\xc7\x11\x5b\xae\xa2\x76\x9b\xb3\xb0\x9d\xe6\xe5\xa3\x86\x91\x5f\x6c\xc7\xb3\xc3\x35\x0f\x30\xd0\xf1\xe0\xc5\x75\x93\x20\xb1\x05\x0d\xcb\xd3\x23\x55\x14\x12\xb6\x73\x0d\xb3\xed\x11\xea\x28\xc5\x54\xa1\x87\xc4\xdc\x62\x3b\xab\x7d\x8e\x93\x98\xaf\x95\x8e\xf2\x4a\x1b\x55\x00\x20\xea\x9d\x85\x5d\xf9\xf9\x45\xf4\xe1\xa7\xff\x53\x7f\x87\x9c\xba\xc6\x2e\x4f\x5c\x2b\x76\x36\xed\x19\xc0\x7c\x96\x49\xb4\xfc\x46\x16\xd2\x28\x17\x40\xc0\x55\x56\x82\xcf\x60\x1a\x83\xf0\x4e\xe7\x0f\x0e\x50\xf7\x10\x63\x9d\xf3\x23\xac\x34\xc5\x67\x2f\xcc\x6f\x7d\x9a\x91\x96\x3d\x3e\xf4\xa9\x01\xef\x43\xce\x4a\xac\x04\x27\xaf\x69\x31\xac\x4c\x39\x53\x94\x12\x61\xc1\xcc\xad\xb0\xdb\xd8\x70\xc1\x7f\xa0\x40\xb9\xa5\xa7\x41\x83\x0d\x83\x1a\x1c\x1a\x5d\x5e\x96\xc5\x7c\x19\xdd\xc1\x16\xc5\xf6\x74\xf7\x3f\x3b\x1b\xdc\x6a\xc9\xf3\xa7\xee\xeb\xe0\xcb\x4c\x5f\x5c\x4e\x67\x97\x6e\x40\x6e\xa3\x7a\xe8\x5a\x19\xab\xb4\x8b\xcf\xcb\x05\xd2\x65\x63\xa6\x72\xa3\x22\x5e\xdb\x22\x89\xf5\xb6\x0d\x67\xdb\x3c\xb6\xaa\xab\xa5\x6f\xab\x04\x15\x57\xcb\x6e\x7e\x1d\xda\x86\x94\x47\xcf\x37\xec\x61\x52\x1f\x2f\x20\x9a\x76\x89\x26\xde\xb3\x76\xea\xac\x6d\x4c\x5d\x66\xf6\x87\x75\xcf\x52\x2c\xc5\x88\xbe\x26\xeb\x5e\xa6\x15\xd2\x0f\xb0\xb4\x33\x9a\x4b\xc1\x22\x3c\x5a\x53\xab\x87\x6e\xf4\xb0\xcc\x75\x46\xa9\x57\xb7\x6f\x97\x6e\x3c\xd8\x3b\x71\xe0\x16\x4f\xbe\x23\x71\xd5\x76\xb6\x69\x89\x6d\x34\x9d\x20\x67\x30\xda\xb2\xf9\x89\xa6\xee\x39\xfb\x79\xb6\x61\x2c\x71\xa0\x0e\xf3\x30\x9c\xfd\xf4\x9d\x2f\xc6\x36\x86\xf6\xd5\x96\xc2\xd8\xe6\x18\xfb\x1c\x2a\xad\x0b\xcd\xa8\xa2\xbc\xb4\x9f\x5a\xf8\x98\x82\x5b\xbc\xb2\x62\x0d\x0d\x00\x79\x73\x0c\x58\x7c\x5c\x79\x7c\xc5\x44\x7d\x88\x68\x98\x62\x88\x3a\x2c\x7f\x14\x41\x14\xd7\xb7\x01\x7f\x4e\x31\x5e\xe3\x7b\x66\x50\xef\x8d\x29\x1a\x96\x21\x7f\x3e\x1c\xb6\xb6\x5f\x61\xe3\x8f\xe3\x65\xbd\x37\xbd\x3d\x5f\x74\x54\x39\xe4\x6f\xf4\xd5\x91\x02\x19\x06\xfa\x1f\xd8\xc2\x5d\x80\x22\x74\x47\x07\xfc\x07\xdb\xad\x5f\xb1\x87\x87\x5f\xae\x91\xb5\x05\x57\x4e\x33\x5b\xcd\x83\x84\xcd\xee\x8a\xb2\xd7\xde\x0f\xfe\x59\x65\x4c\xda\x9c\x58\xef\x60\x53\xed\x5c\xc7\xcc\x1b\x43\x3f\x76\xc6\xfc\xa1\xf0\x12\xf5\xd6\x90\x8e\x45\xab\x6d\x49\x70\xc8\xbe\x2e\xc2\x25\xd0\xbe\x3d\xa3\x70\x8b\x0c\xab\xfa\xba\xc9\x01\x7f\x40\x38\x98\x3c\x9d\xbc\x9d\x9d\x4e\x9a\x19\x59\x6f\xf8\x37\x0a\x1b\x0c\x26\x8c\x88\xd7\x23\x41\x78\x3c\x72\x2e\xda\xae\xee\xe3\x1d\x71\xf0\xbe\xc4\x07\x5e\x88\x9b\x12\x47\x47\xfe\x7c\x7d\xd0\x9a\xbc\xb3\x8b\xc5\xc9\xe5\x2f\xf5\xa5\x2a\x65\xe4\x2c\x0c\xd8\x0b\x6f\x03\xf7\x71\xfb\xfb\x08\xef\xdb\xaf\x79\xec\x6c\xf6\x7b\x87\x5a\x9f\x41\xcd\xf6\xd3\x12\xf2\x22\x5f\x9b\x76\x47\xcb\x37\x24\xbb\xab\x20\xf8\x5f\x00\x00\x00\xff\xff\x01\x42\x0f\x8c\x7e\x10\x00\x00")

func binDmijBytes() ([]byte, error) {
	return bindataRead(
		_binDmij,
		"bin/dmij",
	)
}

func binDmij() (*asset, error) {
	bytes, err := binDmijBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/dmij", size: 4222, mode: os.FileMode(509), modTime: time.Unix(1439329387, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bin/dmij": binDmij,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bin": &bintree{nil, map[string]*bintree{
		"dmij": &bintree{binDmij, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

