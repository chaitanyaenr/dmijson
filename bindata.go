// Code generated by go-bindata.
// sources:
// bin/dmij
// DO NOT EDIT!

package dmijson

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _binDmij = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x58\x6d\x77\xdb\xb6\x15\xfe\x3c\xfe\x8a\x5b\x5a\x8d\x5f\x66\x99\x49\xb6\xb5\xab\x3c\xb9\x47\xa9\x95\x44\x9d\x63\xf9\x58\x5e\xb7\x33\x49\x39\x87\x22\x21\x9b\x35\x09\xaa\x04\x68\xc7\x8b\xbd\xdf\xbe\xe7\x02\x20\x45\xca\x76\x96\xea\x8b\x04\xe0\xbe\xe1\xbe\x3c\xf7\x42\x5b\xdf\x04\x8b\x44\x06\x8b\x50\x5d\x79\xde\x96\xb7\x45\x51\x2e\x6f\x44\xa1\x49\x5f\x09\xca\x4b\xbd\x2a\x35\xe5\x4b\x8a\xb3\x24\x16\x51\x1e\x0b\x4a\xa4\xce\xe9\xe7\xc9\xf8\xd4\x50\xa7\xe1\x42\xa4\x8a\xc2\x42\x90\xd2\x45\xb2\x5a\x89\x98\xc9\xc3\x34\x25\x99\x4b\x7c\xaf\xae\x42\x59\x66\xa2\x48\x22\xd2\xe2\x93\x06\xcb\xad\xa0\x34\xcf\xaf\x69\x99\x17\x74\x32\x78\x33\x3c\xe9\xd1\x2f\x83\x93\x7f\x0c\x69\x47\xad\xd2\x44\xeb\x44\x5e\x12\x58\x59\xff\x76\x6f\x7b\x17\x1c\xc9\x92\x57\x50\x91\x28\x48\xe5\x5d\x5e\x4b\x4a\x34\xef\x84\x96\xdd\x98\xb3\x10\x51\x58\x2a\xd8\x22\x22\x9d\xe4\x52\x51\x21\x56\x22\xd4\xfb\x24\xc2\xe8\x0a\xa6\x2b\x1d\xca\xc8\xc8\x89\xb0\x21\x62\x16\x0e\x2b\x49\x67\x2b\x8a\x93\x02\x5c\x79\x71\x47\xa1\x8c\x29\x2e\x33\xbe\x4b\x68\x1d\x21\xa4\xb9\xd6\xaa\xc8\x23\xa1\x14\x2c\x84\x36\xaf\x94\x4a\x68\xba\x18\xbc\xa3\xf1\xc9\x31\x7f\xbd\x1f\x9c\x1e\x9f\x0c\x79\xe5\x7e\x9d\x9d\x0f\xdf\x8e\xfe\xe5\x79\xbf\x95\xb9\x16\x3b\xbb\xf4\x99\x3c\xc2\xe7\x9f\xef\x07\x17\x7d\xbf\xb3\xe7\x9b\xd5\xd6\x74\x4a\x9d\xcf\xbc\x17\x04\x14\x3c\xd0\x7c\x4e\xf6\x73\x7f\x0f\xf3\x75\x59\x48\x26\x22\x75\x9d\xac\xd8\x13\x8b\x34\x94\xd7\x86\xb1\xe6\xfb\x1d\x3c\x4e\xb5\x55\x37\x9d\xf6\xd4\x2a\x8c\x44\x6f\x3e\x0f\x1e\xfc\xf5\x79\x67\x47\x44\x57\x39\x75\x78\x41\xf7\xa4\x0b\xea\xc6\xb4\x3d\xd3\xdb\xbb\x90\x59\x88\x2c\xbf\x11\xa4\xc3\x85\xaa\xad\x30\x84\x2f\x5e\xc0\x9c\xd1\xbb\xd3\xf1\xf9\x70\x6a\x15\xec\xef\x3f\xcc\x8d\x6d\x38\xb2\x8a\xfd\x36\x0b\xac\xed\x98\x14\x60\x22\x2c\x90\x7b\x08\x7f\x29\x3c\xeb\x18\xb8\x1d\x49\x82\x78\xb1\xff\x5c\x5a\xdc\x84\x69\x29\x14\x82\x82\xc8\x44\x79\x99\xc6\x36\x99\xd2\xe4\x5a\x10\x12\x6d\x21\x8a\xb5\x59\x56\x74\xff\xbf\xf4\x66\x34\x9e\x9c\x8b\x9b\x44\x21\x27\x1a\x4a\x71\xf2\x0b\xe8\x1f\x6d\x1e\x0b\x15\x21\x97\xf5\xa3\x83\x41\x1c\x17\x88\x7f\x7b\x73\x82\xe4\x0e\xd3\xe6\x5e\x9f\xfc\x73\x38\xdc\x77\x57\x37\xce\xec\x4a\x82\xdb\x6d\x42\x3c\xcc\x7c\x73\xff\x99\xef\xf3\xb9\x0d\x58\x6d\xf5\x1e\x0b\xfd\x38\x7d\xd9\xfd\x61\xfe\xc7\x9d\x03\xf3\xbd\xfb\x63\xe7\x59\x59\x46\x92\xcf\xea\xbf\xa4\xc7\x7b\xf0\xbc\x65\x98\xa4\x26\x09\x0d\xe1\xd1\x8b\xd7\xac\xeb\x90\xc4\x27\xd4\xd1\x2b\xfc\x00\x89\xc8\x12\xcd\x24\xb5\x31\x6f\x47\x27\xc3\xd3\xc1\x87\xa1\x0b\x10\x8b\x20\x1f\x35\xb8\x4c\x52\x21\xc3\x8c\x2b\x4d\xdb\xa0\x56\xda\xbb\x82\x38\xb5\xe9\xe8\x68\xcd\xcd\xda\xd5\x55\x7e\xbb\xd6\xee\x13\x7d\xf6\xa1\x33\x42\x18\x3b\xac\xdc\xec\x1e\xd6\x87\x0f\xbe\x35\xc8\xd3\xf9\xaf\x2a\x97\xc6\x26\xef\xe2\xc3\xd9\xf1\xe8\x1c\xe9\x99\x5d\x6b\x81\x8a\xed\xc6\xbb\x9e\x77\x3e\xfc\x79\xf8\x13\x52\xeb\xe3\xce\x48\x86\xa8\xfa\x1b\x71\x7f\x11\x2e\x52\x71\x3f\x44\xcd\x8e\x97\x64\x17\x93\x0f\x9c\x03\xf7\x5b\xf7\xd6\x9f\xbe\xe7\x01\xce\x52\x86\xad\xee\x80\x6c\xd2\xf6\x77\xbc\x3f\x4c\xfd\x52\x5e\xcb\xfc\x56\xfa\xf3\xbe\x2e\x90\x88\x66\x47\xad\x44\x94\x2c\x13\x11\x37\x76\x01\x82\x0b\xc1\x6e\x48\x81\x12\x8b\x3b\xca\x0f\xc4\x41\x76\xd0\x20\x90\xb9\x66\xbc\xb8\x01\x6e\xc6\x1b\xdb\x4f\xc9\xb3\xe4\x42\x09\xa9\x5b\xbb\x94\xe5\x71\x99\x0a\x8b\x5d\xac\xac\x71\xfa\xf2\xd5\xeb\x3f\xfd\xf9\x2f\xdf\x7d\xff\xd7\x1f\x1a\x9b\xf5\xde\xcb\xc6\xe6\xdf\x72\x0b\xe3\xac\xf9\xa8\xda\x87\xf3\x6e\xaf\x10\x47\x1a\xbd\x9d\xf4\x91\x85\x61\x4c\x5d\x40\xf2\xe8\x74\xe8\xc5\xb9\xad\x40\x5e\xd4\x70\xc0\x8b\xaf\x82\x03\x43\xb8\x51\xd1\xad\x33\x24\x78\xc7\xc6\xcd\x20\x17\xf2\xfa\x59\xba\x8f\xef\x81\xc6\xb0\xd1\xd1\x59\x60\x65\x04\x63\x82\xde\xf7\xbd\xef\x1e\xfc\x2f\xf3\x4f\x07\xdd\x7f\xcf\x2d\x40\x82\x0e\x30\xdd\xb7\xbc\x41\x1b\xfe\x1e\x09\xb1\xe8\x3e\xf9\xfb\xe8\xac\x42\x23\x5b\xdd\xdc\x71\xd0\xdd\xb8\x99\x11\x92\x20\x15\x4b\xe3\x59\xbf\xe7\xd0\xdc\x35\xb3\x0d\xb2\x22\xb9\xbc\x6a\xd1\x19\x61\xce\x94\x6f\xbf\xed\xed\x3d\x98\x5d\xc3\xeb\x76\xb7\xb6\xf6\x7a\x0f\x95\x6e\x80\xf8\xba\xf3\xdd\x6d\x43\x32\xb2\x8f\x3b\x93\x42\x11\xee\x9b\x8e\x65\x5a\x24\xf0\x52\x58\xa5\xe8\x7c\x36\x9d\x94\xeb\x8f\x95\x67\xac\x7d\x00\xa9\x35\xf4\xe2\xee\xf6\xba\x66\x67\x03\x3f\x19\xd7\x2d\x8f\xa5\x7c\x33\xbe\x78\x6f\x12\x88\xe3\x6b\xd9\x78\xab\xb2\x14\x53\x40\x46\xc8\x2b\x2d\x8c\x73\x8d\x69\xa5\x8c\x85\x4a\x0a\xae\x44\xb8\x05\x4d\x5c\x08\x54\x45\xdb\x0f\xfc\x8d\x98\xec\xec\xce\xfc\xd9\xc1\x2c\xa8\x63\xd3\x45\x70\xac\xe8\xca\x39\xe6\x7b\x6b\xab\x11\xbe\xb6\xf3\xcc\x77\x10\xcc\xfc\x0d\x46\x97\xc6\xf6\x2e\x55\x1e\x77\x38\x91\xb1\x52\x28\x63\x40\xd7\xb6\x0a\x66\x6a\xaf\x13\x04\x97\x98\x3c\x0c\x77\x76\x8d\xc1\x80\x3a\x16\x7b\x82\x0e\xf7\xf9\x23\x0a\x62\x71\x13\xc8\x12\x61\x78\x7d\xf4\xe2\x55\x75\x75\x3e\x6b\xb8\x5d\xe7\x2b\xa4\xc7\x8d\x48\x79\x34\x2a\x23\x80\xbc\xb0\x7d\x0b\x95\x5c\xe0\x1c\xbf\x16\xe2\x32\x91\xd2\xb4\x36\x33\xe3\xa0\x8f\x49\x9b\x7e\x08\x38\x87\x80\x45\x7e\x83\x50\xb9\x09\x83\x9b\x8c\x9b\x2d\xdc\xae\x5b\xcd\xe7\x87\x66\x26\xf2\xdc\x1c\x00\x6b\xa2\x54\x84\x92\xca\x15\x60\x25\xc1\xa8\xa5\xc3\xcb\xfa\x90\x25\xdb\x16\x51\xb5\x15\xe0\x3e\xf9\x33\x59\x77\x8e\xf9\x4c\xfa\x90\x81\xbb\x2c\x93\x4f\x94\x41\x92\x82\x6d\x4a\x33\x1c\xb9\xf6\xfc\xb5\xce\xa9\x68\xab\x66\xd0\x6f\x92\x07\xee\x3a\x6b\x91\x55\x22\x4e\x2e\x36\xb6\xdc\x30\x55\x6d\x5a\x8f\xf4\x59\x48\x73\xcf\x01\x44\x25\x96\x77\x97\x49\xa3\x8a\x7e\x2d\x71\x09\x37\x32\x92\x48\x45\x86\x50\xd9\x69\x12\x73\x29\xf7\x03\x7f\x32\x3e\x19\x57\xb5\x8c\x3c\xc6\xdc\xd8\x88\x69\x68\xbd\xe0\x18\x37\x6a\x0a\x8e\xec\xfe\xa7\x5d\x56\x2c\x6c\xa3\x58\x78\xab\x66\xe4\x85\xa9\x30\xbe\x70\xc5\x03\xcc\xb1\x3c\x58\xd8\xdc\xf5\xc9\x5f\x17\xa9\xe1\xc1\x70\x54\x14\x21\x6c\xe7\x8c\x61\xdb\x23\x04\x3b\x45\xf7\xa3\xdb\x44\x5f\x01\xee\xab\x3b\xc7\x49\xcc\xc7\x42\x62\x5a\x92\x5a\x14\x28\xc8\x6a\x9c\xe5\xab\xfc\xf8\x6c\xb5\xf3\xaf\xff\x93\x24\xfb\x9c\x25\xb5\x5d\x8e\xb8\x52\x6c\x6d\xda\xe6\x31\x2d\xcb\x42\x14\xd8\x2a\x2c\x42\x2d\xac\x03\x01\x0f\x99\x02\x9f\xc6\x3c\x01\x42\xee\xb9\x16\xc0\xb6\xe1\x63\xf4\x42\xfc\x84\x95\xba\xb8\x73\xc2\xdc\x83\x40\x32\xb2\xf1\x8d\xf7\x5d\x68\xc0\x7b\x9b\xb3\x12\x23\xc1\xca\xab\xeb\x00\x03\x70\xce\x14\x2a\x84\x5b\x30\x1b\x94\x18\xd3\x8c\xbb\x70\x7f\xd4\x9c\x5a\xd3\xd3\x5e\x5d\x89\x7b\x55\x29\xd6\xba\x9c\x2c\x83\xb1\x61\x74\x0d\x5b\x04\xdb\xd3\x7e\x1a\x18\x2c\xb6\xaf\x0e\xc6\xfb\xaa\xf8\xbc\xc7\x91\x3e\x3b\x1f\x8d\xcf\xdd\xc4\x5e\x7b\x75\xdf\xd6\x1b\x5e\x59\xd6\x3f\xcf\x27\x48\x9b\x8d\x99\xcc\x38\x81\xab\x45\x21\x5e\x3e\x15\x23\x27\xe2\x3a\x8e\x8d\xec\x6a\xe8\x5b\x2b\x41\xc6\xad\xdf\x10\xee\xd3\xa2\xad\x49\x19\xea\xbf\x60\x0f\x93\x3a\x7f\x01\x76\xa4\x0d\x34\xf1\xa4\xb8\x91\x67\x4d\x63\xaa\x34\x33\x1f\xcc\xac\x86\x62\xe6\xf7\xe8\x29\x59\xe6\x01\xb0\x4f\x40\x34\xd3\x13\x39\x15\x0c\x9e\xa2\x34\xa5\xb8\x6d\x7b\x0f\xe3\x68\xab\x75\x39\x75\x3b\xe6\x3d\x86\x1f\xe6\xcc\xdf\xb5\xd3\x33\x9f\x91\x3f\x6d\x5e\xb6\x2e\x89\xb5\x37\xad\x20\x6b\x30\xca\xb2\xfe\xf8\x75\xde\x73\xf4\xf3\x6c\xc5\x58\x62\x91\x17\xe6\xa1\x19\xba\x6e\x37\xc1\xf3\xca\xb4\x4b\x5e\x9a\x54\xe8\x9b\x18\x63\xe4\x42\xa6\x79\x40\xb3\x09\x3a\x15\x9e\xd4\x0e\x25\xd1\x9a\x6e\x23\xea\xa6\xe8\x46\x76\x36\xfe\xec\x7b\x51\x5c\x9d\x7a\xfc\x88\x66\xd4\xc5\x2b\x76\xaf\x9a\xda\x52\xd4\xa2\xcf\x82\xba\xdd\xc6\x68\xee\x1b\xd7\x62\x7b\x56\x8d\x20\x3f\x9d\x5e\xb4\x54\x59\xfc\xae\xf5\x55\x4e\x00\x19\x3a\xe3\x6f\x78\x22\xd8\xbb\xf3\x20\xdf\x62\x09\xf6\xd6\x2f\x13\xc1\x00\xb1\xff\x78\x24\xab\x4c\x98\x5a\xd5\x6c\x36\xf7\x03\xb6\xbb\x2d\xca\x1c\xbb\x8b\xf0\xc7\x6a\x63\xda\x7a\xcb\xdc\x0f\x56\x55\xd7\x6b\x19\x7a\xa9\xe9\x65\xf3\xad\x84\x12\x71\x22\xe5\xda\x92\x96\x49\xf3\x75\xbc\xd9\x69\x4f\x8b\x30\xec\x76\x85\x97\xb2\x57\x64\x18\x95\x97\x75\x14\xf8\x7d\x63\x9a\x45\x2a\x0c\x3a\xdc\x9a\x87\xa9\xcc\x8b\x0c\x33\xe0\x9d\xc5\x1f\xf7\x5f\xca\x4d\x12\xa2\x9f\xd8\xff\x1a\x80\x15\x60\xbb\xcc\x7b\x97\x42\x0a\x83\x8d\x71\x2e\x14\xa3\x99\x2a\x57\xab\xdc\xfc\x09\xc3\xe3\x82\x01\xb1\x45\x88\x17\x2e\xff\xe3\x21\xab\x7f\x1e\xea\xb7\xd9\xe4\xe2\x78\x74\x5a\x0d\xf3\x97\x02\x73\x07\x3a\x95\xbf\xec\x29\x9f\xf0\xf3\xd0\xba\xd3\xa0\x43\x07\x6b\x96\x60\x9d\xb6\xdc\x6d\x34\xe5\xf1\xd9\xc5\xe0\xfc\x1d\x1d\x1e\xba\x43\xb5\x6b\xe5\xda\x4e\xe4\xb6\x85\x0a\x23\x97\xa9\x6e\x40\x31\x34\xed\xf1\x63\xf3\xdd\x08\x3f\xda\x57\x1c\x35\x9e\x84\x5c\x72\x76\xd7\x0a\xc6\x23\xd4\xe3\x46\xfd\x04\xb3\x2a\xe3\xbc\xf1\x07\xd4\xfd\x53\xd2\x38\x56\x2c\xe2\x39\x5a\xcf\xfb\x5f\x00\x00\x00\xff\xff\x75\xc0\x31\xef\xe9\x12\x00\x00")

func binDmijBytes() ([]byte, error) {
	return bindataRead(
		_binDmij,
		"bin/dmij",
	)
}

func binDmij() (*asset, error) {
	bytes, err := binDmijBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/dmij", size: 4841, mode: os.FileMode(509), modTime: time.Unix(1444162071, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bin/dmij": binDmij,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bin": &bintree{nil, map[string]*bintree{
		"dmij": &bintree{binDmij, map[string]*bintree{
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

